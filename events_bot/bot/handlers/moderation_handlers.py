from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from events_bot.database.services import ModerationService, PostService, NotificationService
from events_bot.bot.utils import get_db_session, send_post_notification
from events_bot.database.models import ModerationAction
from events_bot.bot.keyboards import get_moderation_keyboard, get_moderation_queue_keyboard

router = Router()

def register_moderation_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    dp.include_router(router)

@router.callback_query(F.data == "moderation")
async def show_moderation_queue_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    async with get_db_session() as db:
        pending_posts = await ModerationService.get_moderation_queue(db)
        
        if not pending_posts:
            await callback.message.edit_text(
                "üì≠ –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
                reply_markup=get_moderation_queue_keyboard()
            )
            return
        
        response = "üîç –ü–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
        for post in pending_posts:
            response += f"üìù {post.title}\n"
            response += f"üë§ {post.author.first_name or post.author.username}\n"
            response += f"üìÇ {post.category.name}\n"
            response += f"üÜî ID: {post.id}\n\n"
        
        await callback.message.edit_text(
            response,
            reply_markup=get_moderation_queue_keyboard()
        )
        await callback.answer()

@router.callback_query(F.data.startswith("moderate_"))
async def process_moderation_action(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    data = callback.data.split("_")
    action = data[1]
    post_id = int(data[2])
    
    async with get_db_session() as db:
        if action == "approve":
            post = await PostService.approve_post(db, post_id, callback.from_user.id)
            if post:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                users_to_notify = await NotificationService.get_users_to_notify(db, post)
                await send_post_notification(callback.bot, post, users_to_notify)
                
                await callback.answer("‚úÖ –ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")
                
        elif action == "reject":
            post = await PostService.reject_post(db, post_id, callback.from_user.id)
            if post:
                await callback.answer("‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")
                
        elif action == "changes":
            post = await PostService.request_changes(db, post_id, callback.from_user.id)
            if post:
                await callback.answer("üìù –ó–∞–ø—Ä–æ—à–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ—Å—Ç–µ!")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π") 