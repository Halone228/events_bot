from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from events_bot.database.services import UserService, CategoryService
from events_bot.bot.states import UserStates
from events_bot.bot.keyboards import (
    get_main_keyboard,
    get_category_selection_keyboard,
    get_city_keyboard,
)
from events_bot.bot.utils import get_db_session

router = Router()


def register_user_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dp.include_router(router)


@router.message(UserStates.waiting_for_city, F.text)
async def process_city_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=get_city_keyboard())
        return

    async with get_db_session() as db:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await UserService.register_user(
            db=db,
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user.city = message.text
        await db.commit()

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        categories = await CategoryService.get_all_categories(db)

        await message.answer(
            f"üèôÔ∏è –ì–æ—Ä–æ–¥ {message.text} –≤—ã–±—Ä–∞–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:",
            reply_markup=get_category_selection_keyboard(categories),
        )
        await state.set_state(UserStates.waiting_for_categories)


@router.callback_query(F.data == "change_city")
async def change_city_callback(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:", reply_markup=get_city_keyboard()
    )
    await state.set_state(UserStates.waiting_for_city)
    await callback.answer()


@router.callback_query(F.data == "change_category")
async def change_category_callback(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    async with get_db_session() as db:
        categories = await CategoryService.get_all_categories(db)
        user_categories = await UserService.get_user_categories(
            db, callback.from_user.id
        )
        selected_ids = [cat.id for cat in user_categories]

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:",
            reply_markup=get_category_selection_keyboard(categories, selected_ids),
        )
        await state.set_state(UserStates.waiting_for_categories)
        await callback.answer()


@router.callback_query(F.data == "my_posts")
async def show_my_posts_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    from events_bot.database.services import PostService

    async with get_db_session() as db:
        posts = await PostService.get_user_posts(db, callback.from_user.id)

        if not posts:
            await callback.message.edit_text(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤.", reply_markup=get_main_keyboard()
            )
            return

        response = "üìä –í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n"
        for post in posts:
            status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if post.is_approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
            response += f"üìù {post.title}\n"
            response += f"üìÇ {post.category.name}\n"
            response += f"üìÖ {post.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            response += f"üìä {status}\n\n"

        await callback.message.edit_text(response, reply_markup=get_main_keyboard())
        await callback.answer()


@router.callback_query(F.data == "help")
async def show_help_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    help_text = """
‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

ü§ñ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
‚Ä¢ üìä –ú–æ–∏ –ø–æ—Å—Ç—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
‚Ä¢ üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ - —Å–º–µ–Ω–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ üìÇ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é - —Å–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤

üìã **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ—Å—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ

üìù **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:**
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ü–æ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π

‚ùì **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞
"""

    await callback.message.edit_text(
        help_text, reply_markup=get_main_keyboard(), parse_mode="Markdown"
    )
    await callback.answer()
