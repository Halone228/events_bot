from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from events_bot.database.services import PostService
from events_bot.bot.states import PostStates
from events_bot.bot.keyboards import get_main_keyboard
from events_bot.bot.utils import get_db_session

router = Router()

def register_post_handlers(dp: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ—Å—Ç–æ–≤"""
    dp.include_router(router)

@router.callback_query(F.data == "create_post")
async def start_create_post(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    await callback.message.edit_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞:",
        reply_markup=get_main_keyboard()
    )
    await state.set_state(PostStates.waiting_for_title)
    await callback.answer()

@router.message(PostStates.waiting_for_title, F.text)
async def process_post_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø–æ—Å—Ç–∞"""
    if len(message.text) > 200:
        await message.answer("‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(title=message.text)
    await message.answer(
        "üìÑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:"
    )
    await state.set_state(PostStates.waiting_for_content)

@router.message(PostStates.waiting_for_content, F.text)
async def process_post_content(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    if len(message.text) > 4000:
        await message.answer("‚ùå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(content=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with get_db_session() as db:
        from events_bot.database.services import UserService
        user_categories = await UserService.get_user_categories(db, message.from_user.id)
        
        if not user_categories:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            return
        
        selected_category = user_categories[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é) –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
        data = await state.get_data()
        title = data.get('title')
        content = message.text
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        post = await PostService.create_post(
            db=db,
            title=title,
            content=content,
            author_id=message.from_user.id,
            category_id=selected_category.id
        )
        
        await message.answer(
            f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n\n"
            f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category.name}\n\n"
            f"–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

 